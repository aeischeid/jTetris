/* 
  PROCESSINGJS.COM
  Native Processing compatible 
*/  

// Global variables
int X, Y, nX, nY; 
float easing = 0.4;
Piece currentPiece, nextPiece;
PShape s;

// Setup the Processing Canvas
void setup(){
  // Set canvas size
  size( 240, 500 );
  strokeWeight( 1 );
  frameRate( 30 );
  //set where pieces begin to drop from
  startX = (width/2); 
  startY = 10;
  X = (width / 2) -10;
  Y = 5;
  
/*  shapeMode(CENTER);*/
  rectMode(CENTER);
/*  s1 = loadShape("data/long.svg");*/
/*  s2 = loadShape("data/t.svg");*/
  
  currentPiece = getPiece();
  nextPiece = getPiece();
}

// Main draw loop
void draw(){
  // Fill canvas grey - have to do in draw loop to draw over old piece position
  background( 100 );
  
  // Draw pieces
  currentPiece.display();
  
  nextPiece.display();
}

void keyPressed() {
  println("pressed " + key + " " + keyCode);
  // 37,38,39,40 correspond to left,up,right,down
  if(keyCode == 37){
    currentPiece.move(-20,0);
  }
  if(keyCode == 39){
    currentPiece.move(20,0);
  }
  if(keyCode == 38){
    currentPiece.turn();
  }
  if(keyCode == 40){
    currentPiece.move(0,20);
  }
}

void getPiece() {
  int shape = int(random(1,3));
  switch(shape){
    case 1:
      return new Rectangle();
      break;
    case 2:
      return new Lshape();
      break;
    case 3:
      return new Sshape();
      break;
    default:
      println("WTF");
  }
}

class Piece
{
  float xpos, ypos, rotation, nRotation; // x & y position, new and old rotation angles
  
  Piece() {
    rotation = 0.0;
    nRotation = 0.0;
    xpos = startX;
    ypos = startY;
  }
 
  void move(int posX, int posY) {
    xpos += posX;
    ypos += posY;
  }
  
  void turn() {
    nRotation += HALF_PI;
  }
}

class Rectangle extends Piece {
  int w, h; // width & height
  
  Rectangle() {
    w = 80;
    h = 20;
  }
  
  void display() {
    // Set fill-color to blue
    fill( 0, 121, 184 );
    // Move
    translate(xpos, ypos);
    // animate the rotation
    if(nRotation > rotation){
      float dif = nRotation - rotation;
      if(abs(dif) > 0.2) {
        rotation += dif * easing;
      }
      else {
        rotation = nRotation;
      }
    }
    rotate(rotation);
    // Set stroke-color white
    stroke(255);
    rect(0, 0, w, h);
  }
}

class Lshape extends Piece {
  Lshape() {
  
  }
  
  void display() {
    // Set fill-color to blue
    fill( 40, 200, 90 );
    // Move
    translate(xpos, ypos);
    // animate the rotation
    if(nRotation > rotation){
      float dif = nRotation - rotation;
      if(abs(dif) > 0.2) {
        rotation += dif * easing;
      }
      else {
        rotation = nRotation;
      }
    }
    rotate(rotation);
    shapeMode(CENTER);
    beginShape();
    vertex(0, 0);
    vertex(20, 0);
    vertex(20, 20);
    vertex(40, 20);
    vertex(40, 40);
    vertex(0, 40);
    endShape(CLOSE);
  }
}

class Sshape extends Piece {
  Sshape() {
  
  }
  
  void display() {
    // Set fill-color
    fill( 200, 40, 40 );
    // Move
    translate(xpos, ypos);
    // animate the rotation
    if(nRotation > rotation){
      float dif = nRotation - rotation;
      if(abs(dif) > 0.2) {
        rotation += dif * easing;
      }
      else {
        rotation = nRotation;
      }
    }
    rotate(rotation);
    shapeMode(CENTER);
    beginShape();
    vertex(0, 0);
    vertex(40, 0);
    vertex(40, 20);
    vertex(60, 20);
    vertex(60, 40);
    vertex(20, 40);
    vertex(20, 20);
    vertex(0, 20);
    endShape(CLOSE);
  }
}


