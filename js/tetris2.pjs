/* 
  PROCESSINGJS.COM - BASIC EXAMPLE
  Native Processing compatible 
*/  

// Global variables
float radius = 50.0;
int X, Y;
int nX, nY, rotate; 
int delay = 4;
Piece p1,p2,p3,p4,p5,p6;

// Setup the Processing Canvas
void setup(){
  size( 250, 500 );
  strokeWeight( 1 );
  frameRate( 30 );
  X = (width / 2) -10;
  Y = 5;
  nX = X;
  nY = Y;
  rotate = 0
  p1 = new Piece();
  p2 = new Piece();
  p3 = new Piece();
  p4 = new Piece();
  p5 = new Piece();
  p6 = new Piece();
}

// Main draw loop
void draw(){
  // Track shape to new destination
  X+=(nX-X)/delay;
  Y+=(nY-Y)/delay;
  
  // Fill canvas grey
  background( 100 );
  
  // Set fill-color to blue
  fill( 0, 121, 184 );
  
  // Set stroke-color white
  stroke(255); 
  
  // Draw rect
  rect( X,Y, 20, 60 );
  if(rotate == 1){
    rotate(90);
    rotate = 0;
  }
}


// Set circle's next destination
/*void mouseMoved(){*/
/*  nX = mouseX;*/
/*  nY = mouseY;  */
/*}*/

void keyPressed() {
  println("pressed " + key + " " + keyCode);
  if(int(key) == "LEFT"){ 
    println("LEFT");
  }
  if(keyCode == 37){
    nX = X - 20;
  }
  if(keyCode == 39){
    nX = X + 20;
  }
/*  if(keyCode == 38){*/
/*    rotate = 1;*/
/*  }*/
  if(keyCode == 40){
    nY = Y + 20;
  }
}

void getShape(int shape){
  switch(shape){
    case 1:
      rect(50,5,20,20);
      break;
    case 2:
      rect(50,5,20,40);
      break;
    case 3:
      rect(50,5,20,60);
      break;
    case 4:
      rect(50,5,40,40);
      break;
    default:
      
  }
}

class Piece
{
  int shape; // 
  float xpos; // xposition
  float ypos ; // yposition
 
  Piece(int ishape, float ixp, float iyp) {
    shape = ishape;
    xpos = ixp;
    ypos = iyp;
  }
 
  void move (float posX, float posY, float damping) {
    float dif = ypos - posY;
    if (abs(dif) > 1) {
      ypos -= dif/damping;
    }
    dif = xpos - posX;
    if (abs(dif) > 1) {
      xpos -= dif/damping;
    }
  }
  
  void display() {
    for (int i=0; i<t; i++) {
      rect(xpos+(i*(d+w)), ypos, w, height*h);
    }
  }
}

